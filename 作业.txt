瀑布模型的特点：
将 软件生命周期 划分为制定计划、需求分析、 软件设计 、程序编写、软件测试和运行维护等六个基本活动，并且规定了它们自上而下、相互衔接的固定次序，如同瀑布流水，逐级下落。 从本质来讲，它是一个软件开发架构，开发过程是通过一系列阶段顺序展开的，从系统需求分析开始直到产品发布和维护，每个阶段都会产生循环反馈，因此，如果有信息未被覆盖或者发现了问题，那么最好 “返回”上一个阶段并进行适当的修改，开发进程从一个阶段“流动”到下一个阶段，这也是瀑布开发名称的由来。 瀑布模型核心思想是按工序将问题化简，将功能的实现与设计分开，便于分工协作，即采用结构化的分析与设计方法将逻辑实现与物理实现分开。

敏捷的特点：
首要任务是尽早地、持续地交付可评价的软件，以使客户满意。
　　乐于接受需求变更，即使在开发后期也是如此。敏捷软件开发能够驾驭需求的变化，从 而为客户赢得竞争优势。
　　频繁交付可使用的软件，交付的间隔越短越好，可以从几个月缩减到几个星期。
　　在整个项目开发期间，业务人员和开发人员必须朝夕工作在一起。
　　围绕那些有推动力的人们来构建项目，给予他们所需的环境和支持，并且相信他们能够把工作做好。
　　开发团队及在开发团队内部进行最快速、有效的传递信息的方法是面对面交谈。
　　可使用的软件是进度的主要衡量指标。
　　提倡可持续发展。出资人、开发人员及使用者应该共同维持稳定的开发速度。
　　为了增强敏捷能力，应持续关注技术上的杰出成果和良好的设计。
　　简洁，最小化那些没有必要投入的工作量是至关重要的。
　　最好的架构、需求和设计都源于自我组织的团队。
　　团队定期反思如何变得更有战斗力，然后相应地转变井调整其行为。
　敏捷开发模式的分类
　　敏捷开发的实现主要包括 SCRUM、XP（极限编程）、Crystal Methods、FDD（特性驱动开发）等等。其中 SCRUM 与 XP 最为流行。
　　同样是敏捷开发，XP 极限编程 更侧重于实践，并力求把实践做到极限。这一实践可以是测试先行，也可以是结对编程等，关键要看具体的应用场景。



两种方法：
结对编程：
结对编程（英语：Pair programming）是一种敏捷软件开发的方法，两个程序员在一个计算机上共同工作。一个人输入代码，而另一个人审查他输入的每一行代码。输入代码的人称作驾驶员，审查代码的人称作观察员（或导航员）。两个程序员经常互换角色。
持续集成：
持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。