package SingleLinkedList;

public class SingleLinkedList {
    private Node head;
    private Node tail;
    private Node cursor;

    SingleLinkedList(int size) {
        setup();
    }

    SingleLinkedList() {
        setup();
    }

    private void setup() {
        tail = head = cursor = new Node(null);
    }

    public void clear() {
        head.setNext(null);
        cursor = tail = head;
    }

    //判断是否为空
    public boolean isNotEmpty() {
        return head.next() != null;
    }

    //判断是否为满
    public boolean isFull() {
        return false;
    }

    //向光标位置插入元素至下一个位置
    public void insert(Object data) {
        if (data != null) {
            cursor.setNext(new Node(data, cursor.next()));
            cursor = cursor.next();
            if (tail == cursor) {
                tail = cursor.next();
            }
        }
    }

    //删除光标标识的元素
    public void remove() {
        if (isNotEmpty()) {
            //如果在尾部，删除并移动至开头
            if (tail == cursor) {
                cursor.setNext(null);
                gotoBeginning();
            }
            //如果在头部，则无法向前移动元素
            else if (head == cursor) {
                gotoNext();
                cursor = head;
            } else gotoPrev();
            cursor.setNext(cursor.next().next());
            cursor = cursor.next();
        }
    }

    //替换光标标识的元素
    public void replace(Object data) {
        if (data != null) {
            cursor.setNext(new Node(data, cursor.next().next()));
        }
        cursor = cursor.next();
    }

    //移动至头部
    public boolean gotoBeginning() {
        cursor = head;
        return true;
    }

    //移动至尾部
    public boolean gotoEnd() {
        cursor = tail;
        return true;
    }

    //移动至下一个
    public boolean gotoNext() {
        if (cursor == tail) {
            return false;
        } else {
            if (cursor != null) {
                cursor = cursor.next();
            }
        }
        return true;
    }

    //移动至前一个
    public boolean gotoPrev() {
        if (cursor == head) {
            return false;
        } else {
            Node temp = head;
            while ((temp != null) && (temp.next() != cursor))
                temp = temp.next();
            cursor = temp;
        }
        return true;
    }

    //获取光标标识的值
    public Object cursor() {
        gotoPrev();
        Object temp = cursor.next().element();
        gotoNext();
        return temp;
    }

    //遍历链表
    public void showList() {
        if (isNotEmpty()) {
            System.out.print("[");
            gotoBeginning();
            while (cursor.next() != null)
                System.out.print(cursor() + "]");
            cursor = cursor.next();
        }
    }
}
